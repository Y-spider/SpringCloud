server:
  port: 80

spring:
  cloud:
    consul:
      discovery:
        service-name: ${spring.application.name}
      port: 8500
      host: 127.0.0.1
    openfeign:
      client:
        config:
          default: # default 代表全局配置，如需局部配置将default替换为对应的微服务名称即可
            loggerLevel: full
            connect-timeout: 20000 # 设置连接超时时间
            read-timeout: 20000 #读取超时时间
          cloud-payment-service: # 这个就是局部配置,这个名称就是对应的微服务的名称
            connect-timeout: 20000 # 连接超时时间
            read-timeout: 20000 # 20s
      httpclient:
        hc5:
          enabled: true
      compression:
        request:
          enabled: true
          min-request-size: 2048 # 最小触发压缩大小
          mime-types: text/xml,application/xml,application/json # 压缩的类型
        response:
          enabled: true # 开启响应压缩
          # 配置circuitbreaker相关配置
      circuitbreaker:
        enabled: true # 开启继电器
        group:
          enabled: false # 开启分组，没有开启分组时永远不会使用分组配置，会精确优先，分组次之(开了分组)，默认最后。
  application:
    name: cloud-consumer-order-openfeign80

#loggerr:
#  level:
#    openfeign:
#      debug: true
#    top:
#      chopper:
#        apis:
#          PayFeignApi: debug # 将PayFeignApi 的接口调用日志级别设置为 debug 才可以在控制台上打印日志信息


#  1. 6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入open状态,拒绝所有请求。
#  2. 等待5s后，CircuitBreaker将自动从OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  3. 如果还是异常，将重新进入到开启状态，如果正常处理，则进入CLOSE闭合状态恢复正常处理请求。
resilience4j:
  timelimiter:
    configs:
      default:
        timeout-duration: 10s # 神坑位置，timelimiter。默认限制远程1s 超过1s就超时异常，配置就直接降级了，所以巨坑
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分比，CircuitBreaker变为OPEN状态
        slow-call-duration-threshold: 2s # 设置慢调用阈值为2s
        sliding-window-type: COUNT_BASED # 滑动窗口类型
#        sliding-window-type: COUNT_BASED # 滑动窗口类型
        sliding-window-size: 6 # 缓动窗口配置，COUNT_BASED 6 表示6个请求，配置TIME_BASED 6 表示6s
        minimum-number-of-calls: 6 # 断路器最小样本（6，表示至少计算6个样本，才计算调用失败）
        automatic-transition-from-open-to-half-open-enabled: true # 是否启用半开状态，默认为true
        wait-duration-in-open-state: 5s # 从OPEN到HALF_OPEN需要等待的时间
        permitted-number-of-calls-in-half-open-state: 2 # 半开状态下允许的最大请求数，默认值10。如果其中任意一个请求失败，将重新进入开启状态
        record-exceptions: # 捕获的异常种类,注意，这里只有当服务中抛出包含的异常时，才会被判定为调用失败!!!!!
          - java.util.concurrent.TimeoutException
          - java.lang.RuntimeException
    instances:
      cloud-payment-service: # 这个代表断路器所属的服务名称
        base-config: default # 表示使用的那个配置,default表示使用的是上面默认的配置
  bulkhead:
    configs:
      default:
        max-concurrent-calls: 2 # 最大并发数(默认为25)
        max-wait-duration: 1s # 线程最大等待时间
    instances:
      backendA: # 桶A配置
        baseConfig: default
      backendB: # 配置桶B
        max-concurrent-calls: 20
        max-wait-duration: 10ms
  thread-pool-bulkhead:
    configs: # 配置FixedThreadPoolBulkhead 舱壁的相关配置
      default:
        maxThreadPoolSize: 4 # 线程池的最大线程数
        coreThreadPoolSize: 2 # 核心线程数
        queueCapacity: 2 # 线程排队队列的最大容量
    instances:
      backendA: # 实例A 使用默认配置
        base-config: default
      cloud-payment-service: #实例B 使用自定义配置
        max-thread-pool-size: 1
        core-thread-pool-size: 1
        queue-capacity: 1
  ratelimiter:
    configs:
      default:
        limit-for-period: 2 #在一次刷新周期内，允许执行的最大请求数
        limit-refresh-period: 1s #限流器每隔limitRefreshPeriod刷新一次，将运行处理最大请求数量重置为limitForPeriod(这个就是一个刷新周期,默认为50纳秒)
        timeout-duration: 1 #线程等待权限的默认等待时间
    instances:
      cloud-payment-service:
        base-config: default

# 基于时间滑动窗口相关配置
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s # 神坑位置，timelimiter。默认限制远程1s 超过1s就超时异常，配置就直接降级了，所以巨坑
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分比，CircuitBreaker变为OPEN状态
#        slow-call-duration-threshold: 2s # 设置慢调用阈值为2s，当高于这个这个阈值时就视为慢调用
#        sliding-window-type: TIME_BASED # 时间滑动窗口类型
#        slow-call-rate-threshold: 30 # 慢调用百分比峰值，断路器把调用时间大于 slow-call-rate-threshold 视为慢调用，当慢调用比列高于时，就进入服务降级
#        # automatic-transition-from-open-to-half-open-enabled: true # 是否启用半开状态，默认为true
#        wait-duration-in-open-state: 5s # 从OPEN到HALF_OPEN需要等待的时间
#        sliding-window-size: 2 # 时间滑动窗口大小
#        minimum-number-of-calls: 2 # 断路器计算失败率或慢调用率之前所需要的最小样本
#        permitted-number-of-calls-in-half-open-state: 2 # 半开状态下允许的最大请求数，默认值10。如果其中任意一个请求失败，将重新进入开启状态
#        record-exceptions: # 捕获的异常种类,注意，这里只有当服务中抛出包含的异常时，才会被判定为调用失败!!!!!
#          - java.util.concurrent.TimeoutException
#          - java.lang.RuntimeException
#    instances:
#      cloud-payment-service: # 这个代表断路器所属的服务名称
#        base-config: default # 表示使用的那个配置,default表示使用的是上面默认的配置


# ==========================zipkin配置==========================
management:
  zipkin:
    tracing:
      endpoint: http://127.0.0.1:9411/api/spans # 固定默认的zipkin访问地址
      connect-timeout: 1s # 访问超时连接时间默认为1s
  tracing:
    sampling:
      probability: 1.0 # 采样率 默认为0.1(这个其实就是10次中只有1次被采样收集下来，值越大采集的效果就越好)